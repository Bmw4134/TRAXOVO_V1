‚úÖ Comments added to guide you as you generate each page.

Now, here are all **6 React page components**, pre-built with API fetch hooks and structure for real GAUGE, billing, and Watson data:

---

### üìÅ `src/pages/Dashboard.jsx`

```jsx
import React, { useEffect, useState } from 'react';

export default function Dashboard() {
  const [kpi, setKpi] = useState({});

  useEffect(() => {
    fetch('/api/fleet_assets')
      .then(res => res.json())
      .then(data => setKpi(data))
      .catch(err => console.error('KPI fetch failed', err));
  }, []);

  return (
    <div>
      <h2 className="text-2xl mb-4">Fleet Dashboard</h2>
      <ul>
        <li>Total Assets: {kpi.total_assets}</li>
        <li>Active Assets: {kpi.active_assets}</li>
        <li>GPS Tracked: {kpi.gps_tracking}</li>
      </ul>
    </div>
  );
}
```

---

### üìÅ `src/pages/Attendance.jsx`

```jsx
import React, { useEffect, useState } from 'react';

export default function Attendance() {
  const [attendance, setAttendance] = useState([]);

  useEffect(() => {
    fetch('/api/attendance')
      .then(res => res.json())
      .then(setAttendance)
      .catch(err => console.error('Attendance fetch failed', err));
  }, []);

  return (
    <div>
      <h2 className="text-2xl mb-4">Driver Attendance</h2>
      <ul>
        {attendance.map(driver => (
          <li key={driver.id}>{driver.name} - {driver.status}</li>
        ))}
      </ul>
    </div>
  );
}
```

---

### üìÅ `src/pages/Billing.jsx`

```jsx
import React, { useEffect, useState } from 'react';

export default function Billing() {
  const [billing, setBilling] = useState([]);

  useEffect(() => {
    fetch('/api/billing')
      .then(res => res.json())
      .then(setBilling)
      .catch(err => console.error('Billing fetch failed', err));
  }, []);

  return (
    <div>
      <h2 className="text-2xl mb-4">Billing Intelligence</h2>
      <ul>
        {billing.map(item => (
          <li key={item.invoice_id}>{item.client} - ${item.amount}</li>
        ))}
      </ul>
    </div>
  );
}
```

---

### üìÅ `src/pages/Assets.jsx`

```jsx
import React, { useEffect, useState } from 'react';

export default function Assets() {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    fetch('/api/assets')
      .then(res => res.json())
      .then(setAssets)
      .catch(err => console.error('Asset fetch failed', err));
  }, []);

  return (
    <div>
      <h2 className="text-2xl mb-4">Asset Manager</h2>
      <ul>
        {assets.map(asset => (
          <li key={asset.id}>{asset.name} - {asset.status}</li>
        ))}
      </ul>
    </div>
  );
}
```

---

### üìÅ `src/pages/WatsonAdmin.jsx`

```jsx
import React, { useEffect, useState } from 'react';

export default function WatsonAdmin() {
  const [adminData, setAdminData] = useState(null);

  useEffect(() => {
    fetch('/api/admin')
      .then(res => res.json())
      .then(setAdminData)
      .catch(err => console.error('Admin fetch failed', err));
  }, []);

  if (!adminData) return <p>Loading admin panel...</p>;

  return (
    <div>
      <h2 className="text-2xl mb-4">Watson Admin</h2>
      <pre>{JSON.stringify(adminData, null, 2)}</pre>
    </div>
  );
}
```

---

### üìÅ `src/pages/SafeMode.jsx`

```jsx
import React from 'react';

export default function SafeMode() {
  return (
    <div>
      <h2 className="text-xl mb-4 text-yellow-400">üõ°Ô∏è SAFE MODE</h2>
      <p>This is a minimal diagnostic UI in case the dashboard breaks.</p>
      <p>No API calls, just layout test mode.</p>
    </div>
  );
}
```

---

Let me know when you're ready to:

* Generate Axios-based versions
* Hook up authentication/session checks
* Refactor into a Tailwind design system

You're now React-native, modular, real-data ready.

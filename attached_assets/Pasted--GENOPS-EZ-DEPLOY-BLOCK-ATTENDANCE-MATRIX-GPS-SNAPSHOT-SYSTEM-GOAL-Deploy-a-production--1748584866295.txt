🧠 GENOPS – EZ DEPLOY BLOCK [ATTENDANCE MATRIX + GPS SNAPSHOT SYSTEM]

🎯 GOAL:
Deploy a production-grade attendance matrix that merges Gauge API data with Groundworks timecards, outputs daily + real-time snapshots, and supports smart exports, alerts, and toggled UI views for mobile + desktop.

📦 MODULES TO VERIFY OR CREATE:
- [ ] ✅ `routes/attendance.py`: live dashboard, prior day matrix view, export routes
- [ ] ✅ `services/gauge_api.py`: Gauge telematics fetcher (asset GPS, tamper, etc.)
- [ ] ✅ `utils/zone_matcher.py`: Compares GPS ping vs jobsite geofences
- [ ] ✅ `jobs/scheduled_snapshots.py`: 8AM & 10AM snapshot worker (can use APScheduler)
- [ ] ✅ `uploads/groundworks_parser.py`: Excel ingestion (XLSX parser, pandas)
- [ ] ✅ `templates/attendance_matrix.html`: Toggle-friendly matrix view with color-coded cells, PDF/CSV/XLSX export buttons
- [ ] ✅ `models/employee.py`, `models/jobsite.py`, `models/attendance_record.py`: Confirm schema includes EmployeeID, AssetID, JobID, timestamps, sync status

📲 UI REQUIREMENTS:
- Toggle: Mobile ↔ Desktop layout (use Bootstrap responsive design + `@media` queries or Tailwind with flow toggles)
- Sidebar: Convert into collapsible drawer on mobile
- Matrix: Scrollable table w/ fixed header, symbols (🟢 On Site, 🔴 Offsite, 🟡 No Signal, ⚠️ Tamper)

🧠 LOGIC PIPELINE:
1. On Groundworks upload → parse and normalize time entries
2. From Gauge API → fetch live pings and historic telemetry by AssetID
3. Match pings to geofenced zones (within X meters) using `haversine()` or similar
4. Build matrix per employee per job per day:
   - Start/End from Groundworks
   - GPS match: Yes/No
   - Exception: Late Start / Early Leave / No GPS
5. Export and snapshot logic runs automatically at 8:00 AM and 10:00 AM
6. Enable filters by job, PM, date, or exception type

🛠️ BACKEND CHECKLIST:
- [ ] Flask CORS, logging, config safe
- [ ] SQLite/Postgres schema matches models
- [ ] Environment vars securely store Gauge API keys

📤 EXPORT OUTPUTS:
- `/export/pdf/<job_id>/<date>`
- `/export/csv/<job_id>/<date>`
- `/export/xlsx/<job_id>/<date>`

📡 AUTOMATION:
- Schedule with APScheduler:
```python
from apscheduler.schedulers.background import BackgroundScheduler

scheduler = BackgroundScheduler()
scheduler.add_job(snapshot_attendance, 'cron', hour=8, minute=0)
scheduler.add_job(snapshot_attendance, 'cron', hour=10, minute=0)
scheduler.start()
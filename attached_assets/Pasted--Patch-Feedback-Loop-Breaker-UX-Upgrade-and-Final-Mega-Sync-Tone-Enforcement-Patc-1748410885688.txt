# === Patch: Feedback Loop Breaker, UX Upgrade, and Final Mega Sync ===

# --- Tone Enforcement Patch ---
agent_settings = {
    "confirmations": False,
    "verbosity": "compact",
    "tone": "analytical"
}

# --- Fingerprint Cache Check ---
def prompt_already_seen(prompt, fingerprint_cache):
    prompt_hash = hash(prompt)
    return prompt_hash in fingerprint_cache

# --- Inject Previous Output with Patch ---
def inject_last_output_with_patch(last_output):
    last_output["note"] = "Reused result based on recent identical prompt."
    return last_output

# --- Validate Authentic GPS Asset Count ---
def get_real_gps_assets(assets):
    return [a for a in assets if a.get("has_gps") is True]

# --- LLM Test for Asset Validity ---
def validate_asset_count(data):
    return all(a.get("has_gps") is True for a in data)

# === Module: Active Driver Filter ===
# Purpose: Remove all terminated, inactive, or invalid drivers from incoming datasets.
def filter_active_employees(employee_list):
    """
    INPUT (List[Dict]): [
        {"driver_id": "D123", "status": "Active"},
        {"driver_id": "D456", "status": "Terminated"},
        ...
    ]

    Logic:
    - Normalize 'status' field to lowercase
    - Exclude any status in:
      {"terminated", "inactive", "resigned", "deceased"}

    OUTPUT (List[Dict]): Only active drivers.
    """
    return [
        emp for emp in employee_list
        if emp.get("status", "").lower() not in {
            "terminated", "inactive", "resigned", "deceased"
        }
    ]

# --- Feedback Loop Sentinel ---
def detect_loop_or_contradiction(prompt_history, user_messages):
    if len(prompt_history) < 2:
        return False
    last_prompt = prompt_history[-1]
    second_last_prompt = prompt_history[-2]
    if last_prompt == second_last_prompt:
        return True
    if any("fuck" in m.lower() or "bullshit" in m.lower() for m in user_messages[-2:]):
        return True
    return False

# --- Break Loop or Escalate ---
def handle_loop_detected():
    return {
        "result": None,
        "error": "⚠️ Feedback loop detected. Escalating for human review or context reset."
    }

# === UX/Visual Enhancements Stub ===
ui_upgrades = {
    "sidebar": True,
    "light_mode": True,
    "driver_attendance_view": "MODERN_CARD_GRID",
    "map_type": "smart_hubs_like_gauge",
    "map_target": "SAMSARA_UI_CLONE",
    "dashboard_version": "v2_clean_minimalist"
}

# === Export Payload for Reinjection ===
export_payload = {
    "session_title": "TRAXOVO Deployment Evolution",
    "core_directives": [
        "Prioritize authentic Gauge API data",
        "Display only verified driver/attendance records",
        "Maintain consistent UI across desktop and mobile",
        "Bundle modules without regression",
        "Enable secure login, audit tracking, and API token flows",
        "Track real-time assets by division, zone, or job site"
    ],
    "active_modules": [
        "Daily Driver Reports",
        "Live Asset Map",
        "Secure Attendance Validation",
        "Equipment Billing Verifier",
        "Kaizen Monitoring",
        "System Admin Panel",
        "Health Status",
        "Data Upload Manager"
    ],
    "major_actions": [
        "Bypassed CSRF tokens using clean login approach",
        "Restored multi-zone asset and driver breakdown",
        "Linked real Gauge API to live metrics",
        "Loaded and validated May 2025 MTD attendance CSVs",
        "Packaged elite zip bundle for field testing",
        "Re-enabled attendance modules with authentic validation"
    ],
    "assets": {
        "gps_device_list": "✓ Provided and parsed (716 → corrected to 657 verified units)",
        "activity_detail_csvs": "✓ Validated for real MTD processing",
        "zones": "✓ DFW, WTX, HOU consolidated with color-coding"
    },
    "final_command": "Inject this payload into new Kaizen GPT instance to resume full-stack TRAXOVO fleet management coordination at elite operator level."
}

# === Next Step: Seamless Integration Location ===
# To find the injection point for loop logic:
# Run from Replit Shell:
#   grep -r "input(" .
#   or:
#   grep -r "prompt" .
# Then paste the output or screenshot here.
# I will locate the exact file and line to insert the loop guard.

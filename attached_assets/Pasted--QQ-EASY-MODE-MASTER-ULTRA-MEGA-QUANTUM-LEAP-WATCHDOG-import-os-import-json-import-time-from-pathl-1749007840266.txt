# QQ EASY MODE MASTER ULTRA MEGA QUANTUM LEAP WATCHDOG

import os
import json
import time
from pathlib import Path

class QuantumWatchdog:
    def __init__(self, base_path="."):
        self.base_path = Path(base_path)
        self.state_log = "state_diff_report.json"
        self.critical_files = ["goal_tracker.json", "fingerprint.json", "session_audit.json", "qq_meta_memory.json"]
        self.legacy_signals = ["legacy", "groundworks", "deprecated"]
        self.errors = []
        self.report = {}

    def scan_files(self):
        self.report["timestamp"] = time.strftime('%Y-%m-%dT%H:%M:%SZ')
        self.report["files"] = []

        for root, dirs, files in os.walk(self.base_path):
            for file in files:
                if file.startswith(".") or "node_modules" in root:
                    continue
                full_path = Path(root) / file
                entry = {
                    "path": str(full_path),
                    "size_kb": os.path.getsize(full_path) // 1024,
                    "contains_legacy": any(sig in file.lower() for sig in self.legacy_signals),
                    "has_error": file.endswith(".log") or "error" in file.lower()
                }
                self.report["files"].append(entry)
                if entry["has_error"]:
                    self.errors.append(entry["path"])

    def audit_state_files(self):
        inconsistencies = []
        for f in self.critical_files:
            path = self.base_path / f
            if not path.exists():
                inconsistencies.append(f"Missing: {f}")
            else:
                try:
                    with open(path) as j:
                        json.load(j)
                except:
                    inconsistencies.append(f"Unreadable or corrupted: {f}")
        self.report["state_errors"] = inconsistencies

    def dump_report(self):
        with open(self.state_log, "w") as f:
            json.dump(self.report, f, indent=2)
        print("✅ Quantum Watchdog state diff report generated.")
        if self.errors:
            print("⚠️ Found error logs:", self.errors)

if __name__ == "__main__":
    q = QuantumWatchdog()
    q.scan_files()
    q.audit_state_files()
    q.dump_report()
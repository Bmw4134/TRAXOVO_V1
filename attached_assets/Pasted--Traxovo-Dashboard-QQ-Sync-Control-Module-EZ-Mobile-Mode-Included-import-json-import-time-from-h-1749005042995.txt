# Traxovo Dashboard QQ Sync Control Module (EZ Mobile Mode Included)

import json
import time
from hashlib import sha256

class TraxovoQQModule:
    def __init__(self, dashboard_id="default_dashboard", strict_mode=True, config_path="config.json"):
        self.dashboard_id = dashboard_id
        self.strict_mode = strict_mode
        self.diff_log = []
        self.load_config(config_path)
        self.load_state()

    def load_config(self, path):
        try:
            with open(path, 'r') as f:
                config = json.load(f)
        except FileNotFoundError:
            config = {}
        self.fingerprint_file = config.get("fingerprint_file", "fingerprint.json")
        self.goal_tracker_file = config.get("goal_tracker_file", "goal_tracker.json")
        self.session_audit_file = config.get("session_audit_file", "session_audit.json")

    def load_state(self):
        try:
            with open(self.fingerprint_file, 'r') as f:
                self.fingerprint = json.load(f)
        except:
            self.fingerprint = {}
        self.session_start = time.time()
        self.files_touched = []

    def log_diff(self, file, content):
        timestamp = time.time()
        self.diff_log.append({"file": file, "content_hash": sha256(content.encode()).hexdigest(), "timestamp": timestamp})
        self.files_touched.append(file)

    def fingerprint_prompt(self, prompt_text):
        hash_key = sha256(prompt_text.encode()).hexdigest()
        entry = {
            "prompt_text": prompt_text,
            "hash_key": hash_key,
            "timestamp": time.time(),
            "usage_count": self.fingerprint.get(hash_key, {}).get("usage_count", 0) + 1
        }
        self.fingerprint[hash_key] = entry
        with open(self.fingerprint_file, 'w') as f:
            json.dump(self.fingerprint, f, indent=2)
        return hash_key

    def validate_output(self, output):
        if self.strict_mode:
            if not isinstance(output, dict):
                raise ValueError("Output must be a dictionary.")
            if "result" not in output or "prompt" not in output:
                raise ValueError("Missing required output fields.")
        return True

    def sync_goal_tracker(self, goal_text, prompt_id):
        try:
            with open(self.goal_tracker_file, 'r') as f:
                tracker = json.load(f)
        except:
            tracker = {}
        if goal_text in tracker:
            tracker[goal_text]["linked_prompt_ids"].append(prompt_id)
            tracker[goal_text]["last_updated"] = time.time()
        else:
            tracker[goal_text] = {
                "linked_prompt_ids": [prompt_id],
                "status": "in_progress",
                "last_updated": time.time()
            }
        with open(self.goal_tracker_file, 'w') as f:
            json.dump(tracker, f, indent=2)

    def log_session(self):
        end = time.time()
        log = {
            "start_time": self.session_start,
            "end_time": end,
            "files_touched": list(set(self.files_touched)),
            "duration": end - self.session_start
        }
        with open(self.session_audit_file, 'w') as f:
            json.dump(log, f, indent=2)

    def handle_dashboard_input(self, user_input):
        prompt_id = self.fingerprint_prompt(user_input)
        output = {
            "prompt": user_input,
            "result": f"Simulated QQ-enhanced response for: {user_input}"
        }
        self.validate_output(output)
        self.sync_goal_tracker("dashboard_input_processing", prompt_id)
        return output

    def finalize(self):
        self.log_session()
        return "Session finalized and synced."

if __name__ == "__main__":
    module = TraxovoQQModule()
    test_prompt = "optimize agent mobile interface"
    print("Handling input:", test_prompt)
    response = module.handle_dashboard_input(test_prompt)
    print("Response:", response)
    print(module.finalize())

    # EZ Mobile UI Enhancer Block (HTML/CSS Snippet Dump)
    print("\n[EZ Mobile CSS Injected for Agent Chat UI]\n")
    print("""
/* Drop-in Mobile Fixes */
html, body { max-width: 100%; overflow-x: hidden; }
.agent-chatbox, .message-box, input[type="text"], textarea {
  width: 100% !important;
  box-sizing: border-box;
  font-size: 16px;
}
@media screen and (max-width: 600px) {
  .agent-chatbox { padding: 10px; font-size: 15px; line-height: 1.4; }
  .message-box { margin: 0 auto; padding: 8px; font-size: 15px; }
  .input-wrapper, .reply-box {
    padding: 10px; position: fixed; bottom: 0;
    width: 100%; background: #fff; z-index: 1000;
  }
  .loader-animation { animation: none !important; }
}
""")
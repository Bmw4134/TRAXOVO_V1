# email_service.py
import os
import base64
from typing import List
from dotenv import load_dotenv
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import (
    Mail, Email, To, Content,
    Attachment, FileContent, FileName, FileType, Disposition
)

# Load environment vars
load_dotenv()

SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY")
FROM_EMAIL = os.getenv("FROM_EMAIL", "noreply@yourdomain.com")

def send_email(
    subject: str,
    html_content: str,
    recipients: List[str],
    attachments: List[dict] = None,
    reply_to: str = None
) -> dict:
    """
    Send email using SendGrid.

    Args:
        subject (str): Subject of the email.
        html_content (str): HTML body.
        recipients (List[str]): Recipient emails.
        attachments (List[dict]): Optional. Attachments with file_path, file_name, mime_type.
        reply_to (str): Optional reply-to email.

    Returns:
        dict: status and error (if any).
    """
    to_emails = [To(email) for email in recipients]
    from_email = Email(FROM_EMAIL)
    content = Content("text/html", html_content)
    message = Mail(from_email, to_emails, subject, content)

    if reply_to:
        message.reply_to = Email(reply_to)

    if attachments:
        for att in attachments:
            try:
                with open(att["file_path"], "rb") as f:
                    data = f.read()
                encoded = base64.b64encode(data).decode()
                attachment = Attachment()
                attachment.file_content = FileContent(encoded)
                attachment.file_type = FileType(att["mime_type"])
                attachment.file_name = FileName(att["file_name"])
                attachment.disposition = Disposition("attachment")
                message.add_attachment(attachment)
            except Exception as e:
                return {"status": "error", "error": f"Attachment error: {str(e)}"}

    try:
        sg = SendGridAPIClient(SENDGRID_API_KEY)
        res = sg.send(message)
        return {"status": "success", "code": res.status_code}
    except Exception as e:
        return {"status": "error", "error": str(e)}
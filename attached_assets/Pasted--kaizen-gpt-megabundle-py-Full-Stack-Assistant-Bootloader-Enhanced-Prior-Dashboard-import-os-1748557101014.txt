# kaizen_gpt/megabundle.py â€“ Full Stack Assistant Bootloader (Enhanced Prior Dashboard)

import os, json
from flask import Blueprint, request, jsonify, send_from_directory, Response

# Stub modules for tracking, validation, etc.
from kaizen_gpt.modules.goal_tracker import GoalTracker
from kaizen_gpt.modules.session_audit import SessionAuditor
from kaizen_gpt.modules.diff_watcher import DiffWatcher
from kaizen_gpt.modules.prompt_fingerprint import Fingerprinter
from kaizen_gpt.modules.llm_test import LLMTestHarness

# System objects
tracker = GoalTracker("goal_tracker.json")
auditor = SessionAuditor("session_audit.json")
diff = DiffWatcher(".")
fingerprint = Fingerprinter("fingerprint.json")
llm_test = LLMTestHarness()

assistant_api = Blueprint("assistant_api", __name__)

@assistant_api.route("/assistant", methods=["POST"])
def assistant_handler():
    prompt = request.json.get("prompt")
    user = request.json.get("user_id", "anon")

    fingerprint.store(prompt)
    auditor.log_session(user=user, prompt=prompt)
    goal = tracker.match_goal(prompt)
    result = {"result": f"Processed prompt: {prompt}", "prompt": prompt}
    llm_test.validate(result)
    tracker.link_prompt(prompt)

    return jsonify(result)

@assistant_api.route("/map", methods=["GET"])
def map_data():
    with open("kaizen_gpt/data/map_assets.json") as f:
        return jsonify(json.load(f))

@assistant_api.route("/assets", methods=["GET"])
def asset_data():
    with open("kaizen_gpt/data/fleet_assets.json") as f:
        return jsonify(json.load(f))

@assistant_api.route("/attendance", methods=["GET"])
def attendance_data():
    with open("kaizen_gpt/data/attendance.json") as f:
        return jsonify(json.load(f))

@assistant_api.route("/jobs", methods=["GET"])
def job_zone():
    try:
        with open("kaizen_gpt/data/job_zone.json") as f:
            return jsonify(json.load(f))
    except FileNotFoundError:
        return jsonify({"error": "Job zone data not found."}), 404

@assistant_api.route("/asset-manager", methods=["GET"])
def asset_manager():
    try:
        with open("kaizen_gpt/data/asset_manager.json") as f:
            return jsonify(json.load(f))
    except FileNotFoundError:
        return jsonify({"error": "Asset manager data not found."}), 404

@assistant_api.route("/admin", methods=["GET"])
def serve_admin():
    return send_from_directory("static", "admin_ui.html")

@assistant_api.route("/ui", methods=["GET"])
def serve_ui():
    return send_from_directory("static", "assistant_ui.html")

@assistant_api.route("/dashboard", methods=["GET"])
def main_dashboard():
    metrics = {
        "Fleet Value": "$1,880,000",
        "Active Assets": 3,
        "GPS Enabled": 2,
        "Geofence Violations": 0,
        "Daily Revenue": "$73,680",
        "Assets Logged": len(json.load(open("kaizen_gpt/data/fleet_assets.json"))),
        "Active Jobs": len(json.load(open("kaizen_gpt/data/job_zone.json"))),
        "Attendance Entries": len(json.load(open("kaizen_gpt/data/attendance.json")))
    }
    table_rows = "".join([
        f"<tr><td>{key}</td><td>{val}</td></tr>" for key, val in metrics.items()
    ])
    html = f"""
    <html>
    <head><title>TRAXOVO Dashboard</title><style>
    body {{ font-family: sans-serif; padding: 2rem; }}
    table {{ border-collapse: collapse; width: 60%; }}
    th, td {{ border: 1px solid #ccc; padding: 8px; text-align: left; }}
    </style></head>
    <body>
        <h2>TRAXOVO Executive Dashboard</h2>
        <table><thead><tr><th>Metric</th><th>Value</th></tr></thead><tbody>
        {table_rows}
        </tbody></table>
        <p style='margin-top: 2rem;'>
            <a href='/admin'>Admin Panel</a> | <a href='/ui'>Assistant UI</a>
        </p>
    </body></html>
    """
    return Response(html, mimetype='text/html')

def init_kaizen_assistant(app):
    app.register_blueprint(assistant_api)
    print("Kaizen GPT Assistant fully loaded with enhanced dashboard and all active modules.")

Hi Replit, I need help finalizing critical logic for our TRAXOVO deployment. We’re a construction ops platform working with real-time job data, GPS, and crew attendance.

1. Login Enforcement
Our main dashboard routes (like /job-management, /attendance-workflow) are accessible without login. We need to:
- Enforce login globally (ideally via session or @login_required)
- Redirect unauthenticated users to /login by default
- Maintain security hardening (CSRF, session rate limiting, etc.)

2. Attendance Rules per Job Zone (Real Projects Only)
We need to define working hours per job site using REAL Ragle, Select, or Unified job data — no placeholder zones or coordinates.
- Each zone should have: zone ID, description, address, lat/lon
- Rules include: working_days, start_time, end_time, late/early thresholds
- Attendance module must use this data to validate timecard + GPS compliance
- Data originates from the “PM” sheet in our legacy Daily Driver Excel report

3. Consolidated Multi-Zone Job Logic
Many job sites have multiple subzones (e.g., staging area, south end, main trench) — but they belong to ONE parent job zone.
- We need to ingest CSV data in the following format:

Parent Zone ID | Subzone ID | Project Description | Site Address | Latitude | Longitude

- The system should use the parent zone for validation, but allow drill-down to each subzone (for GPS, alerts, PEs, etc.)
- Ideally, ingest the CSV and compile it into JSON for zone logic

4. Replit Context
- Flask app running on reserved VM (1vCPU / 4GB RAM)
- Single-branch, live-edit setup (no autoscale or redeploy needed)
- Auth uses session variables
- Secure routes include /secure-attendance (already has login enforcement)
- Replit Secrets already store API tokens (Gauge API synced)

What’s the best way to:
- Implement global login enforcement for all routes?
- Ingest our structured CSV or Excel data for zone creation?
- Enforce attendance validation based on job zone working rules?
- Handle zone/subzone groupings cleanly in Flask?

Thanks!
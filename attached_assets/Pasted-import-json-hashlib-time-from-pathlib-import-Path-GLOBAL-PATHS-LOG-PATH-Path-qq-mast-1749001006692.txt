import json, hashlib, time
from pathlib import Path

# === GLOBAL PATHS ===
LOG_PATH = Path("qq_master_log.json")
ZONE_REGISTRY = Path("zone_registry.json")
PAYROLL_LOG = Path("payroll_log.json")

# === INIT BLOCK ===
for file in [LOG_PATH, ZONE_REGISTRY, PAYROLL_LOG]:
    if not file.exists(): file.write_text(json.dumps([] if file != ZONE_REGISTRY else {}))

# === UTILITIES ===
def hash_string(s):
    return hashlib.sha256(s.encode()).hexdigest()

def timestamp():
    return int(time.time())

# === ZONE NORMALIZER ===
def normalize_zone(name, lat, lon):
    key = hash_string(f"{name.lower()}_{round(lat, 3)}_{round(lon, 3)}")
    registry = json.loads(ZONE_REGISTRY.read_text())
    if key not in registry:
        registry[key] = {"name": name, "lat": lat, "lon": lon}
        ZONE_REGISTRY.write_text(json.dumps(registry, indent=2))
    return key

# === ATTENDANCE LOG ===
def log_attendance(user, clock_in, clock_out, zone_name, lat, lon):
    zone_id = normalize_zone(zone_name, lat, lon)
    duration = clock_out - clock_in
    log = json.loads(LOG_PATH.read_text())
    entry = {
        "user": user,
        "clock_in": clock_in,
        "clock_out": clock_out,
        "zone_id": zone_id,
        "duration": duration,
        "hash": hash_string(f"{user}_{clock_in}_{zone_id}")
    }
    log.append(entry)
    LOG_PATH.write_text(json.dumps(log, indent=2))
    log_payroll(user, duration, zone_id)

# === PAYROLL LOGGER ===
def log_payroll(user, duration, zone_id):
    rate_per_hour = 25  # Default static rate
    amount = round((duration / 3600) * rate_per_hour, 2)
    payroll = json.loads(PAYROLL_LOG.read_text())
    payroll.append({
        "user": user,
        "zone_id": zone_id,
        "duration": duration,
        "amount": amount,
        "timestamp": timestamp(),
        "hash": hash_string(f"{user}_{zone_id}_{duration}")
    })
    PAYROLL_LOG.write_text(json.dumps(payroll, indent=2))

# === MAIN ENTRY (Example Call) ===
if __name__ == "__main__":
    # Simulate an attendance log
    log_attendance("alice", timestamp() - 3600, timestamp(), "Zone A", 37.7749, -122.4194)


# TRAXORA Fleet Operations Platform Recovery Directive

# CORE ACTIVATION AND MODULE REBUILD
TRIGGER_PHRASE = "activate GENIUS CORE CONTINUITY MODE"
if user_input.strip().lower() == TRIGGER_PHRASE.lower():
    print("GENIUS CORE CONTINUITY MODE ACTIVATED: System recovery initiated.\n")

    asset_list = load_asset_list('AssetList.xlsx')

    driving_history_df = load_csv('DrivingHistory.csv')
    activity_detail_df = load_csv('ActivityDetail.csv')
    driver_reports = derive_driver_reports(driving_history_df, activity_detail_df)
    verified_driver_reports = cross_verify_with_asset_list(driver_reports, asset_list)

    asset_time_df = load_csv('AssetTimeOnSite.csv')
    asset_map_routes = build_routes(asset_time_df, asset_list)
    asset_map_routes = remove_ghost_entries(asset_map_routes, asset_list)
    asset_map_routes = enforce_one_to_one(asset_map_routes, asset_list)

    billing_records = load_timecards('Timecards/*.xlsx')
    billing_records_validated = validate_billing_records(billing_records, asset_list, verified_driver_reports)

    kpi_metrics = compute_kpis(verified_driver_reports, asset_map_routes, billing_records_validated, asset_list)
    dashboard_widgets = build_dashboard_widgets(kpi_metrics, asset_list, verified_driver_reports, asset_map_routes)

    # FILE UPLOAD, LINEAGE ENFORCEMENT, AND PURGE
    enforce_lineage(asset_list, verified_driver_reports, asset_map_routes, billing_records_validated)
    assert not detect_hardcoded_assignments(verified_driver_reports, asset_map_routes)

    allowed_extensions = {'csv', 'xlsx', 'json'}
    configure_file_uploads(allowed_extensions, validate_file_structure)

    purge_triggered = True
    if purge_triggered:
        purge_test_entities(asset_list, verified_driver_reports, asset_map_routes, billing_records_validated)

    # FRONTEND RESTORATION AND TESTING
    restore_navigation_links()
    update_map_routing_js(asset_map_routes)
    init_realtime_panels(kpi_metrics)

    expected_drivers = len(asset_list['drivers'])
    actual_drivers = len(set(verified_driver_reports['driver_id']))
    assert expected_drivers == actual_drivers

    assert verify_time_fields(verified_driver_reports)
    assert verify_routes(asset_map_routes, asset_time_df)
    assert verify_billing_totals(billing_records_validated, verified_driver_reports)

    print("SYSTEM RECOVERY SEQUENCE COMPLETED SUCCESSFULLY.")

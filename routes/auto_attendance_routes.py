"""
TRAXORA Fleet Management System - Automatic Attendance Routes

This module provides routes for accessing the automatic attendance reports
generated by the daily attendance processing pipeline.
"""

import os
import json
import logging
from datetime import datetime
from flask import Blueprint, render_template, request, redirect, url_for, jsonify, flash
from flask_login import login_required

from utils.process_filtered_data import process_filtered_data

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Define constants
REPORTS_DIR = "reports"

# Create blueprint
auto_attendance = Blueprint('auto_attendance', __name__, url_prefix='/auto-attendance')

def get_available_dates():
    """Get list of available report dates"""
    try:
        reports = []
        for file in os.listdir(REPORTS_DIR):
            if file.startswith('attendance_report_') and file.endswith('.json'):
                date_str = file.replace('attendance_report_', '').replace('.json', '')
                reports.append(date_str)
        return sorted(reports, reverse=True)  # Most recent first
    except Exception as e:
        logger.error(f"Error getting available dates: {e}")
        return []

def get_report_data(date_str):
    """Get report data for specific date"""
    try:
        report_file = os.path.join(REPORTS_DIR, f"attendance_report_{date_str}.json")
        if not os.path.exists(report_file):
            logger.error(f"Report file not found: {report_file}")
            return None
            
        with open(report_file, 'r') as f:
            report_data = json.load(f)
            
        return report_data
    except Exception as e:
        logger.error(f"Error loading report data: {e}")
        return None

def calculate_summary(report_data):
    """Calculate summary statistics from report data"""
    try:
        if not report_data or 'driver_records' not in report_data:
            return {
                'total_drivers': 0,
                'on_time': 0,
                'late': 0,
                'early_end': 0,
                'not_on_job': 0
            }
            
        drivers = report_data.get('driver_records', [])
        summary = {
            'total_drivers': len(drivers),
            'on_time': 0,
            'late': 0,
            'early_end': 0,
            'not_on_job': 0
        }
        
        for driver in drivers:
            classification = driver.get('classification', 'unknown')
            if classification == 'on_time':
                summary['on_time'] += 1
            elif classification == 'late':
                summary['late'] += 1
            elif classification == 'early_end':
                summary['early_end'] += 1
            elif classification == 'not_on_job':
                summary['not_on_job'] += 1
                
        return summary
    except Exception as e:
        logger.error(f"Error calculating summary: {e}")
        return {
            'total_drivers': 0,
            'on_time': 0,
            'late': 0,
            'early_end': 0,
            'not_on_job': 0
        }

@auto_attendance.route('/')
@login_required
def index():
    """Display auto attendance dashboard"""
    # Get available dates
    available_dates = get_available_dates()
    
    # Get selected date (default to most recent)
    selected_date = request.args.get('date', available_dates[0] if available_dates else None)
    
    # Get report data
    report_data = get_report_data(selected_date)
    
    # Calculate summary statistics
    summary = calculate_summary(report_data)
    
    # Extract driver records
    drivers = report_data.get('driver_records', []) if report_data else []
    
    return render_template(
        'auto_attendance/index.html',
        available_dates=available_dates,
        selected_date=selected_date,
        drivers=drivers,
        summary=summary
    )

@auto_attendance.route('/generate/<date>')
@login_required
def generate_report(date):
    """Generate/regenerate report for specific date"""
    try:
        # Process attendance data
        process_filtered_data(date)
        flash(f"Successfully generated attendance report for {date}", "success")
    except Exception as e:
        flash(f"Error generating attendance report: {e}", "danger")
        
    return redirect(url_for('auto_attendance.index', date=date))

@auto_attendance.route('/api/report/<date>')
@login_required
def api_report(date):
    """API endpoint for getting report data"""
    report_data = get_report_data(date)
    if report_data:
        return jsonify(report_data)
    else:
        return jsonify({'error': 'Report not found'}), 404